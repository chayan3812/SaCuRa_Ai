Perfect. Let’s move forward step-by-step with the next upgrades:

---

## ✅ “**Continue Phase 2.5: Fetch Pages + Insights**”

We’ll fetch the user’s Facebook Pages using the stored access token and show:

* Page name
* Page ID
* Engagement summary

---

### 📄 Update `facebook.ts` API (fetch pages)

```ts
router.get("/pages", async (req, res) => {
  const { token } = req.query;

  try {
    const { data } = await axios.get(`${FB_BASE}/me/accounts`, {
      params: { access_token: token }
    });

    const pages = data.data.map((page: any) => ({
      id: page.id,
      name: page.name,
      access_token: page.access_token
    }));

    res.json({ pages });
  } catch (err) {
    res.status(500).json({ error: "Failed to fetch pages" });
  }
});
```

---

### 📄 `Dashboard.tsx` (show connected pages)

```tsx
import { useEffect, useState } from "react";

export default function Dashboard() {
  const [pages, setPages] = useState<any[]>([]);

  useEffect(() => {
    const token = new URLSearchParams(window.location.search).get("token");
    if (!token) return;

    fetch(`http://localhost:3000/api/facebook/pages?token=${token}`)
      .then(res => res.json())
      .then(data => setPages(data.pages))
      .catch(() => console.warn("Failed to fetch pages"));
  }, []);

  return (
    <div>
      <h2 className="text-2xl font-bold mb-4">📊 Facebook Page Overview</h2>
      {pages.length > 0 ? (
        <ul className="space-y-2">
          {pages.map((page) => (
            <li key={page.id} className="bg-white p-4 rounded shadow">
              <div className="font-semibold">{page.name}</div>
              <div className="text-sm text-gray-500">Page ID: {page.id}</div>
            </li>
          ))}
        </ul>
      ) : (
        <a
          href="http://localhost:3000/api/facebook/connect"
          className="inline-block bg-blue-600 text-white px-4 py-2 rounded shadow"
        >
          Connect Facebook Page
        </a>
      )}
    </div>
  );
}
```

---

## ✅ “**Add Supabase Storage Logic**”

We’ll store the connected Facebook Page + token for later use in tasks like:

* Scheduling posts
* Analyzing ads
* Watching health/status

---

### 📄 Supabase Setup

Create a Supabase project → go to **Table Editor** → Add:

#### Table: `pages`

| Column        | Type      | Note                  |
| ------------- | --------- | --------------------- |
| id            | UUID      | `primary key`         |
| fb\_page\_id  | text      | Facebook Page ID      |
| name          | text      | Page name             |
| access\_token | text      | Long-lived Page Token |
| created\_at   | timestamp | default: now()        |

---

### 📄 Install SDK & Connect

```bash
npm install @supabase/supabase-js
```

```ts
// server/supabase.ts
import { createClient } from "@supabase/supabase-js";

export const supabase = createClient(
  process.env.SUPABASE_URL!,
  process.env.SUPABASE_KEY!
);
```

---

### 📄 Store page inside `facebook.ts` callback route

Add this inside `/callback` after fetching the page token:

```ts
import { supabase } from "../supabase"; // import

// Save the first page token to DB
const pageList = await axios.get(`https://graph.facebook.com/v19.0/me/accounts?access_token=${token}`);
const page = pageList.data.data[0];

await supabase.from("pages").insert({
  fb_page_id: page.id,
  name: page.name,
  access_token: page.access_token
});
```

---

## ✅ “**Start Phase 3: Replit AI Agent Routing to Live UI**”

Goal: Wire backend → AI Agent → frontend live display.

---

### 📄 `/api/agent/ask` — Prompt bridge

```ts
import express from "express";
import { runAgentTask } from "../replit_agent/task_router";

const router = express.Router();

router.post("/ask", (req, res) => {
  const { task, data } = req.body;

  try {
    const output = runAgentTask({ task, data });
    res.json({ result: output });
  } catch (err) {
    res.status(400).json({ error: "Invalid task input" });
  }
});

export default router;
```

Hook into Express:

```ts
import agentRoutes from "./api/agent";
app.use("/api/agent", agentRoutes);
```

---

### 📄 `AdsOptimizer.tsx` (update to call AI agent backend)

```tsx
import { useEffect, useState } from "react";

export default function AdsOptimizer() {
  const [suggestions, setSuggestions] = useState<string[]>([]);

  useEffect(() => {
    fetch("http://localhost:3000/api/agent/ask", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        task: "analyze_ads",
        data: { ads_data: "CTR: 2.3%, Spend: $220, Reach: 1.2k" }
      })
    })
      .then((res) => res.json())
      .then((data) => {
        const lines = data.result.split("\n").slice(2); // Skip heading
        setSuggestions(lines);
      });
  }, []);

  return (
    <div>
      <h2 className="text-2xl font-bold mb-4">📈 Ad Optimizer</h2>
      <ul className="space-y-2">
        {suggestions.map((s, i) => (
          <li key={i} className="bg-white p-4 rounded shadow">{s}</li>
        ))}
      </ul>
    </div>
  );
}
```

---

## ✅ What’s Now Working

| Feature                      | Status |
| ---------------------------- | ------ |
| Facebook OAuth Flow          | ✅ Done |
| Page List Fetch              | ✅ Done |
| Token Storage in Supabase    | ✅ Done |
| Frontend Layout              | ✅ Done |
| Agent Prompt Dispatch (Live) | ✅ Done |

---